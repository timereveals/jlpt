# encoding:utf-8

import random
import argparse
import time


_gojuon = [
    ('a', '„ÅÇ', '„Ç¢'),
    ('i', '„ÅÑ', '„Ç§'),
    ('u', '„ÅÜ', '„Ç¶'),
    ('e', '„Åà', '„Ç®'),
    ('o', '„Åä', '„Ç™'),

    ('ka', '„Åã', '„Ç´'),
    ('ki', '„Åç', '„Ç≠'),
    ('ku', '„Åè', '„ÇØ'),
    ('ke', '„Åë', '„Ç±'),
    ('ko', '„Åì', '„Ç≥'),

    ('sa', '„Åï', '„Çµ'),
    ('si(shi)', '„Åó', '„Ç∑'),
    ('su', '„Åô', '„Çπ'),
    ('se', '„Åõ', '„Çª'),
    ('so', '„Åù', '„ÇΩ'),

    ('ta', '„Åü', '„Çø'),
    ('ti(chi)', '„Å°', '„ÉÅ'),
    ('tu(tsu)', '„Å§', '„ÉÑ'),
    ('te', '„Å¶', '„ÉÜ'),
    ('to', '„Å®', '„Éà'),

    ('na', '„Å™', '„Éä'),
    ('ni', '„Å´', '„Éã'),
    ('nu', '„Å¨', '„Éå'),
    ('ne', '„Å≠', '„Éç'),
    ('no', '„ÅÆ', '„Éé'),

    ('ha', '„ÅØ', '„Éè'),
    ('hi', '„Å≤', '„Éí'),
    ('hu(fu)', '„Åµ', '„Éï'),
    ('he', '„Å∏', '„Éò'),
    ('ho', '„Åª', '„Éõ'),

    ('ma', '„Åæ', '„Éû'),
    ('mi', '„Åø', '„Éü'),
    ('mu', '„ÇÄ', '„É†'),
    ('me', '„ÇÅ', '„É°'),
    ('mo', '„ÇÇ', '„É¢'),

    ('ya', '„ÇÑ', '„É§'),
    ('yu', '„ÇÜ', '„É¶'),
    # ('ye(e)', 'õÄÅ', '„Ç®'),
    ('yo', '„Çà', '„É®'),

    ('ra', '„Çâ', '„É©'),
    ('ri', '„Çä', '„É™'),
    ('ru', '„Çã', '„É´'),
    ('re', '„Çå', '„É¨'),
    ('ro', '„Çç', '„É≠'),

    ('wa', '„Çè', '„ÉØ'),
    # ('wi(i)', '„Çê', '„É∞'),
    # ('we(e)', '„Çë', '„É±'),
    ('wo(o)', '„Çí', '„É≤'),
]


_yoon = [
    ('kya', '„Åç„ÇÉ', '„Ç≠„É£'),
    ('kyu', '„Åç„ÇÖ', '„Ç≠„É•'),
    ('kyo', '„Åç„Çá', '„Ç≠„Éß'),

    ('sya(sha)', '„Åó„ÇÉ', '„Ç∑„É£'),
    ('syu(shu)', '„Åó„ÇÖ', '„Ç∑„É•'),
    ('syo(sho)', '„Åó„Çá', '„Ç∑„Éß'),

    ('tya(cha)', '„Å°„ÇÉ', '„ÉÅ„É£'),
    ('tyu(chu)', '„Å°„ÇÖ', '„ÉÅ„É•'),
    ('tyo(cho)', '„Å°„Çá', '„ÉÅ„Éß'),

    ('nya', '„Å´„ÇÉ', '„Éã„É£'),
    ('nyu', '„Å´„ÇÖ', '„Éã„É•'),
    ('nyo', '„Å´„Çá', '„Éã„Éß'),

    ('hya', '„Å≤„ÇÉ', '„Éí„É£'),
    ('hyu', '„Å≤„ÇÖ', '„Éí„É•'),
    ('hyo', '„Å≤„Çá', '„Éí„Éß'),

    ('mya', '„Åø„ÇÉ', '„Éü„É£'),
    ('myu', '„Åø„ÇÖ', '„Éü„É•'),
    ('myo', '„Åø„Çá', '„Éü„Éß'),

    ('rya', '„Çä„ÇÉ', '„É™„É£'),
    ('ryu', '„Çä„ÇÖ', '„É™„É•'),
    ('ryo', '„Çä„Çá', '„É™„Éß'),
]


_dakuten = [
    ('ga', '„Åå', '„Ç¨'),
    ('gi', '„Åé', '„ÇÆ'),
    ('gu', '„Åê', '„Ç∞'),
    ('ge', '„Åí', '„Ç≤'),
    ('go', '„Åî', '„Ç¥'),

    ('za', '„Åñ', '„Ç∂'),
    ('zi(ji)', '„Åò', '„Ç∏'),
    ('zu', '„Åö', '„Ç∫'),
    ('ze', '„Åú', '„Çº'),
    ('zo', '„Åû', '„Çæ'),

    ('da', '„Å†', '„ÉÄ'),
    ('di(ji)', '„Å¢', '„ÉÇ'),
    ('du(zu)', '„Å•', '„ÉÖ'),
    ('de', '„Åß', '„Éá'),
    ('do', '„Å©', '„Éâ'),

    ('ba', '„Å∞', '„Éê'),
    ('bi', '„Å≥', '„Éì'),
    ('bu', '„Å∂', '„Éñ'),
    ('be', '„Åπ', '„Éô'),
    ('bo', '„Åº', '„Éú'),
]


_yoon_dakuten = [
    ('gya', '„Åé„ÇÉ', '„ÇÆ„É£'),
    ('gyu', '„Åé„ÇÖ', '„ÇÆ„É•'),
    ('gyo', '„Åé„Çá', '„ÇÆ„Éß'),

    ('zya(ja)', '„Åò„ÇÉ', '„Ç∏„É£'),
    ('zyu(ju)', '„Åò„ÇÖ', '„Ç∏„É•'),
    ('zyo(jo)', '„Åò„Çá', '„Ç∏„Éß'),

    ('dya(ja)', '„Å¢„ÇÉ', '„ÉÇ„É£'),
    ('dyu(ju)', '„Å¢„ÇÖ', '„ÉÇ„É•'),
    ('dyo(jo)', '„Å¢„Çá', '„ÉÇ„Éß'),

    ('bya', '„Å≥„ÇÉ', '„Éì„É£'),
    ('byu', '„Å≥„ÇÖ', '„Éì„É•'),
    ('byo', '„Å≥„Çá', '„Éì„Éß'),
]


_handakuten = [
    ('pa', '„Å±', '„Éë'),
    ('pi', '„Å¥', '„Éî'),
    ('pu', '„Å∑', '„Éó'),
    ('pe', '„Å∫', '„Éö'),
    ('po', '„ÅΩ', '„Éù'),
]


_yoon_handakuten = [
    ('pya', '„Å¥„ÇÉ', '„Éî„É£'),
    ('pyu', '„Å¥„ÇÖ', '„Éî„É•'),
    ('pyo', '„Å¥„Çá', '„Éî„Éß'),
]


_nasal = [
    ('n', '„Çì', '„É≥'),
]


class JLPT():
    def __init__(self):
        pass

    def random(self, groups=[], count=0):
        collect = []
        for g in groups:
            collect += random.sample(g, len(g))

        if count == 0 or len(collect) < count:
            count = len(collect)

        sample = random.sample(collect, count)
        return sample

    def display(self, sample, index):
        _ = input('Press Enter to continue:')
        width = 10
        time_cost = {}
        for one in sample:
            hint = one[index]
            begin = time.time()
            _ = input(hint+'')
            end = time.time()
            print(''.join([f'{i: <{width}}' for i in one]))
            elapsed = round(end - begin, 1)
            time_cost[one] = elapsed
            print(f'{elapsed}s')
            print()

        total_time = sum(time_cost.values())
        rank = [(str(v),) + k for k, v in sorted(time_cost.items(),
                                                 key=lambda i: i[1], reverse=True)]
        print(f'Total time:{total_time}s')
        top_n = 10
        if len(rank) < top_n:
            top_n = len(rank)
        for i in range(top_n):
            print(''.join([f'{i: <{width}}' for i in rank[i]]))

    def run(self, key, scope, count):
        index = 0
        if key == 'romaji':
            index = 0
        elif key == 'hiragana':
            index = 1
        elif key == 'katakana':
            index = 2
        else:
            pass

        groups = []
        for i in scope:
            if i == 'gojuon':
                groups.append(_gojuon)
            elif i == 'yoon':
                groups.append(_yoon)
            elif i == 'dakuten':
                groups.append(_dakuten)
            elif i == 'yoon_dakuten':
                groups.append(_yoon_dakuten)
            elif i == 'handakuten':
                groups.append(_handakuten)
            elif i == 'yoon_handakuten':
                groups.append(_yoon_handakuten)
            elif i == 'nasal':
                groups.append(_nasal)
            else:
                pass
        sample = self.random(groups, count)
        self.display(sample, index)


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('-k', '--key', type=str, default='romaji',
                        choices=['romaji', 'hiragana', 'katakana'], required=False)
    parser.add_argument('-g', '--group', nargs='+', default=['gojuon'],
                        choices=['gojuon', 'yoon', 'dakuten',
                                 'handakuten', 'yoon_dakuten', 'yoon_handakuten'],
                        required=False)
    parser.add_argument('-c', '--count', type=int,
                        default=50, help=r'count', required=False)
    args = parser.parse_args()

    jlpt = JLPT()
    jlpt.run(args.key, args.group, args.count)
